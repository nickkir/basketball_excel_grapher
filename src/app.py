import tkinter as tk
from tkinter import filedialog
import errno
import json
import dataObjects
import excelParser
import fileParsingExceptions as fpe
import graphingExceptions as gpe
import numpy as np
from scipy.stats import pearsonr
import math
import julian
import xlrd
from datetime import datetime

from matplotlib.backends.backend_tkagg import (
    FigureCanvasTkAgg, NavigationToolbar2Tk)

# Implement the default Matplotlib key bindings.
from matplotlib.figure import Figure

import base64
import os

import appdirs


class ExcelToolApp(tk.Tk):
    def __init__(self, *args, **kwargs):
        # Inherit the constructor from tk.Tk()
        tk.Tk.__init__(self, *args, **kwargs)

        # Start by setting the team to None
        self.team = dataObjects.NullTeamInfo()

        # Creates the path to all the app data
        self.app_data = appdirs.user_data_dir("Enpeekay Graphing Tool", "Enpeekay")
        try:
            os.makedirs(self.app_data)
        except OSError as e:
            if e.errno != errno.EEXIST:
                raise

        # Initializes the window with the appropriate size and title
        self.initializeWindow()

        # App configurations path
        self.configuration_path = self.app_data + "\\CONFIG.json"

        # Read/Setup the user configurations if possible
        try:
            config_file = open(self.configuration_path, "r")
            self.user_settings_dict = json.load(config_file)
        except OSError as e:
            if e.errno == errno.ENOENT:
                config_file = open(self.configuration_path, "w")
                settings_dict = "{\"last_files\" : []}"
                config_file.write(settings_dict)
                config_file.close()
                self.user_settings_dict = {"last_files": []}

        # Setup a container that will hold the different pages
        container = tk.Frame(self)
        container.pack(side="top", fill="both", expand=True)
        container.grid_rowconfigure(0, weight=1)
        container.grid_columnconfigure(0, weight=1)

        # The application pages
        self.frames = {}

        # Creates all the frames in the container
        for F in (StartPage, GraphPage, RankPage, PersonalGraphPage, UserManual):
            frame = F(container, self)
            self.frames[F] = frame
            frame.grid(row=0, column=0, sticky="nsew")  # Make sure you specify the row and column here

        # Bring the start frame to the top
        self.show_frame(StartPage)

    # function that updates the dependencies of the frames, and then puts the requested frame on top
    def show_frame(self, cont):
        frame = self.frames[cont]
        frame.updateContent()
        frame.tkraise()

    # Need to correct location of temp file
    def create_window_icon(self):
        icon = ""

        icondata = base64.b64decode(icon)

        tempfile = self.app_data + "\\icon.ico"
        iconfile = open(tempfile, "wb")
        iconfile.write(icondata)
        iconfile.close()

        self.wm_iconbitmap(tempfile)

        os.remove(tempfile)

    # Initializes the window's size and location
    def initializeWindow(self):
        screen_width = self.winfo_screenwidth() // 2
        screen_height = self.winfo_screenheight() // 2
        x_center = screen_width // 2
        y_center = screen_height // 2
        format_string = str(screen_width) + "x" + str(screen_height) + "+" + str(x_center) + "+" + str(y_center)
        self.geometry(format_string)
        self.title("Enpeekay Spreadsheet Graphing Tool")

        self.create_window_icon()

    # Returns the recent files from CONFIG.json
    def getRecentFiles(self):
        if "last_files" in self.user_settings_dict:
            return self.user_settings_dict["last_files"]
        else:
            return []

    # Adds a file to CONFIG.json
    def addFile(self, filePath):
        # Should be fine, but just in case user messed with CONFIG
        if "last_files" in self.user_settings_dict:
            file_stack = self.user_settings_dict["last_files"]

            # Initialize the updated stack
            updated_stack = []

            # Should be fine, but just in case user messed with CONFIG
            if not type(file_stack) == list:
                return

            # Don't want to add the file if it's already there, just want to move it in front
            if file_stack.count(filePath) > 0:
                file_stack.remove(filePath)
                updated_stack = [filePath] + file_stack
            # If the stack is less than 3 and doesn't contain the file, we can just add it
            elif len(file_stack) < 3:
                if file_stack.count(filePath) == 0:
                    updated_stack = [filePath] + file_stack
            # If the stack is full, push new file onto it
            else:
                temp = ([filePath] + file_stack)
                temp.pop()
                updated_stack = temp

        else:
            updated_stack = [filePath]

        self.user_settings_dict["last_files"] = updated_stack
        try:
            config_file = open(self.configuration_path, "w")
            config_file.write(json.dumps(self.user_settings_dict))
            config_file.close()
        except:
            pass

    # Updates the app instance's team
    def setTeam(self, team):
        self.team = team

    def getTeam(self):
        return self.team


class StartPage(tk.Frame):

    def __init__(self, parent, controller):
        # Background color for page, just so we can easily change everything at once
        self.bg_color = "#d3ecf2"
        self.button_color = "#3071F2"
        self.controller = controller

        # Inherit the frame constructor
        tk.Frame.__init__(self, parent, bg=self.bg_color)
        self.grid_columnconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=1)
        self.grid_rowconfigure((0, 2), weight=2)
        self.grid_rowconfigure((3, 4, 5), weight=1)

        # StringVars for labels whose text changes during app usage
        self.current_file = tk.StringVar()
        self.current_file.trace("w", self.hideError)
        self.error_message = tk.StringVar()
        self.error_message.set("There was a problem with the file you selected")

        file_box_label = tk.Label(self, text="Current File:", bg=self.bg_color, font=("system", 10))
        file_box_label.grid(row=0, sticky="e")

        # This label needs to be stored as an attribute so that methods can modify it
        self.warning_label = tk.Label(self, textvariable=self.error_message, fg=self.bg_color, bg=self.bg_color,
                                      font=("system", 7))
        self.warning_label.grid(row=1, columnspan=2)

        # Creates a label or drop-down menu, based on whether there are any previously used files
        if len(controller.getRecentFiles()) == 0:
            self.current_file.set("Please select a file")
            file_selection = tk.Label(self, textvariable=self.current_file)
            file_selection.grid(row=0, column=1, pady=80, sticky="w")
        else:
            self.current_file.set(controller.getRecentFiles()[0])
            file_selection = tk.OptionMenu(self, self.current_file, *controller.getRecentFiles())
            file_selection.configure(highlightthickness=0)
            file_selection.grid(row=0, column=1, pady=80, sticky="w")

        # All buttons created
        browse_button = tk.Button(self, text="Select a new file", command=self.browseFiles, font=("system", 10),
                                  bg="#484848", fg="white")
        browse_button.grid(row=2, columnspan=2, pady=(0, 30))

        rank_button = tk.Button(self, text="RANK", command=lambda: self.parseExcel(controller, RankPage),
                                font=("system", 15), bg=self.button_color, fg="white", width=20)
        rank_button.grid(row=3, columnspan=2, pady=10)

        graph_button = tk.Button(self, text="COMPARATIVE GRAPH", command=lambda: self.parseExcel(controller, GraphPage),
                                 font=("system", 15), bg=self.button_color, fg="white", width=20)
        graph_button.grid(row=4, columnspan=2, pady=10)

        player_graph_button = tk.Button(self, text="INDIVIDUAL GRAPH",
                                        command=lambda: self.parseExcel(controller, PersonalGraphPage),
                                        font=("system", 15), bg=self.button_color, fg="white", width=20)
        player_graph_button.grid(row=5, columnspan=2, pady=10)

        instructions_button = tk.Button(self, text="User Guide", font=("system", 6), bg=self.bg_color, fg="black", bd=0,
                                        command=lambda: controller.show_frame(UserManual))
        instructions_button.grid(row=6, column=1, padx=5, pady=5, sticky="se")

    # Method that opens the browsing window and updates the class attribute
    def browseFiles(self):
        searched_file = filedialog.askopenfilename(initialdir="/", title="Select file",
                                                   filetypes=(("Excel files", "*.xlsx"), ("All files", "*.*")))
        if len(searched_file) > 0:
            self.current_file.set(searched_file)
            self.hideError()

    # Method that makes the error message visible
    def displayError(self, errorMessage=None):
        if errorMessage is not None:
            self.error_message.set(errorMessage)
        self.warning_label.config(fg="red")

    # Method that makes the error message invisible
    def hideError(self, *args):
        self.warning_label.config(fg=self.bg_color)
        self.error_message.set("An unknown error occurred.")

    # Attempts to parse the selected excel
    # Successful parsing: modifies the team attribute on the app object
    # Failed parsing: displays a warning message to the user
    def parseExcel(self, controller, page):
        try:
            candidate_file = self.current_file.get()
            extractor = excelParser.ExcelParser1(candidate_file)
            team = dataObjects.TeamInfo(extractor)
            controller.setTeam(team)
            controller.addFile(candidate_file)
            controller.show_frame(page)
        except FileNotFoundError:
            self.displayError("ERROR 101: The file you selected could not be found")
        except PermissionError:
            self.displayError("ERROR 102: The file you selected is open in another program")
        except fpe.NoDateCellError:
            self.displayError("ERROR 201: The file you selected had no cells labeled \"DATE\"")
        except fpe.InappropriateDateColumnError as e:
            error_index = e.index
            error_content = e.contents
            self.displayError("ERROR 202: Cell #" + str(
                error_index) + " under \"DATE\" contained \"" + error_content + "\" rather than a date")
        except fpe.PlayersNotFoundError:
            self.displayError("ERROR 203: The players in your file could not be found")
        except fpe.MissingStatError as e:
            self.displayError("ERROR 204: There was an issue with the following player's stats: " + e.playerName)
        except fpe.EmptyDateColumnError:
            self.displayError("ERROR 205: There were no dates found under the \"DATE\" cell")
        except fpe.UnchronologicalDateColumnError as e:
            date1str = e.date1.strftime("%Y:%m:%d")
            date2str = e.date2.strftime("%Y:%m:%d")
            self.displayError(
                "ERROR 206: The date cell is not in chronological order (" + date1str + " → " + date2str + ")")
        except:
            self.displayError()

    # Updates the frame to the current recently used files
    def updateContent(self):
        self.controller.config(menu=tk.Menu(self.controller))
        self.hideError()


class GraphPage(tk.Frame):
    # Creates the frame and the widgets that appear on all frames (custom frames are created in other methods)
    def __init__(self, parent, controller):
        # These objects are used by all the methods, so we just store them on the object
        self.controller = controller
        self.bg_color = "#d3ecf2"
        self.button_color = "#3071F2"

        # Inherits from frame
        tk.Frame.__init__(self, parent, bg=self.bg_color)

        # Organize the grid
        self.grid_columnconfigure(0, weight=1)
        self.grid_columnconfigure(1, weight=0)
        self.grid_rowconfigure((0, 1, 2, 3, 4, 5), weight=1)

        # Store the current graph as an attribute, so we can close it before making a new one
        # Initialized with an empty frame
        self.current_graph = tk.Frame(self)

        # Stores all the widgets are that are spreadsheet dependant, so we can destroy them afterwards
        self.dynamic_widgets = []

        # Stores pairs, which represent whether a given player has been checked
        self.name_check_pairs = []

        # Stores the suggested stats, where the key is the stat name and the value is the stat object
        self.suggested_stats_dict = {}
        self.selected_stat = tk.StringVar()

        # Create the graphing warning label to be initialized by the caller
        self.graph_error = tk.Frame()

        # Create a dictionary, where each key is a str(stat+interval) and each entry is the team average
        # Calculating the team average is really slow, so we do it once and store it in the dictionary
        self.averages = {}

        # Code for interval selection
        interval_options = ["Weekly", "Monthly"]
        self.selected_interval = tk.StringVar()
        self.selected_interval.set(interval_options[0])
        interval_drop = tk.OptionMenu(self, self.selected_interval, *interval_options)
        interval_drop['bg'] = self.button_color
        interval_drop['fg'] = 'white'
        interval_drop['font'] = ('system', 5)
        interval_drop['width'] = 15
        interval_drop.grid(row=1, column=1, pady=5, padx=30)
        interval_drop.configure(highlightthickness=0)

        # Code for average check box
        self.average_check = tk.IntVar()
        c = tk.Checkbutton(self, text="Show Team Average", variable=self.average_check, onvalue=1, offvalue=0,
                           bg=self.bg_color, font=('system', 5))
        c.grid(row=2, column=1, pady=5, padx=30)

        # Code for "Advanced Settings" button
        b1 = tk.Button(self, text="Advanced Settings", command=lambda: print("WIP"), width=19, bg=self.button_color,
                       fg='white', font=('system', 5))
        b1.grid(row=3, column=1, pady=5, padx=30)

        # Code for graphing button
        b2 = tk.Button(self, text="GO", command=self.basicGo, width=19, bg=self.button_color, fg='white',
                       font=('system', 5))
        b2.grid(row=5, column=1, pady=10, padx=30)

    # Method that gets all the new info from the selected excel before creating the frame
    def updateContent(self):
        # Create the menu bar on top of the frame
        page_menu = tk.Menu(self.controller)
        page_menu.add_command(label="Home", command=lambda: self.controller.show_frame(StartPage))
        page_menu.add_command(label="Rank", command=lambda: self.controller.show_frame(RankPage))
        page_menu.add_command(label="Individual Graph", command=lambda: self.controller.show_frame(PersonalGraphPage))
        self.controller.config(menu=page_menu)

        # Deletes the previous spreadsheet's widgets/Reset toggleables
        self.tearDown()
        self.graph_error.grid_forget()

        # Dynamically create widgets
        self.createPlayerBoxes()
        self.createStatDropdown()

    # Creates all the checkboxes for the players
    def createPlayerBoxes(self):
        players = self.controller.getTeam().getRoster()
        checkbox_container = tk.Frame(self, bg=self.bg_color)
        checkbox_container.grid(row=4, column=1, sticky="w", padx=20)
        self.dynamic_widgets.append(checkbox_container)
        for player in players:
            player_name = player.getName()
            player_check = tk.IntVar()
            c = tk.Checkbutton(checkbox_container, text=player_name, variable=player_check, onvalue=1, offvalue=0,
                               bg=self.bg_color, font=("Arial", 9))
            self.dynamic_widgets.append(c)
            c.grid(sticky="w")
            self.name_check_pairs.append((player_name, player_check))

    # Creates a drop-down menu for all the stats
    def createStatDropdown(self):
        suggested_stats_objects = self.controller.getTeam().getSuggestedStats()
        suggested_stats_names = []
        for stat in suggested_stats_objects:
            suggested_stats_names.append(stat.getName())
            self.suggested_stats_dict[stat.getName()] = stat
        self.selected_stat.set(suggested_stats_names[0])

        stats_drop = tk.OptionMenu(self, self.selected_stat, *suggested_stats_names)
        stats_drop['bg'] = self.button_color
        stats_drop['fg'] = 'white'
        stats_drop['font'] = ('system', 5)
        stats_drop['width'] = 15
        stats_drop.grid(row=0, column=1, pady=5, padx=30)
        stats_drop.configure(highlightthickness=0)
        self.dynamic_widgets.append(stats_drop)

    # Removes all the spreadsheet specific widgets from the frame
    def tearDown(self):
        # Clear the widgets
        while not len(self.dynamic_widgets) == 0:
            w = self.dynamic_widgets.pop()
            w.destroy()

        # Reset the toggleables
        self.name_check_pairs.clear()
        self.averages.clear()
        self.average_check.set(0)
        self.graph_error.grid_forget()

        # Reinitialize the Null Frame
        self.current_graph = tk.Frame(self)

    def getSelectedStat(self):
        return self.suggested_stats_dict[self.selected_stat.get()]

    # Helper function that creates the GraphDataContainer object
    def createBasicGraphContainer(self):
        selected_team = self.controller.getTeam()
        selected_stat = self.getSelectedStat()

        selected_player_objects = []
        for (player_name, check_value) in self.name_check_pairs:
            if check_value.get() == 1:
                selected_player_objects.append(selected_team.getPlayerByName(player_name))

        return dataObjects.GraphDataContainer(selected_player_objects, self.selected_interval.get(), selected_stat,
                                              selected_team)

    # Displays the graph on screen
    def createGraph(self, abstractContainer):
        # Starting by clearing the old graph
        self.current_graph.grid_forget()

        # Frame for holding the graph
        graph_container_frame = tk.Frame(self, bg=self.bg_color)
        # Specify the minimum size of the plot
        fig = Figure(figsize=(6, 4))

        # Gets the listS of DATAPOINT objects
        y_entries = abstractContainer.getAllYSeries()
        x_series = abstractContainer.getXSeries()

        if len(y_entries) == 0 and self.average_check.get() == 0:
            raise gpe.NoPlayersSelected()

        # Create the plot
        plot = fig.add_subplot(111)

        # Creates the points on the graph
        for y_series in y_entries:
            y_values = []
            for datapoint in y_series:
                y_values.append(datapoint.getYValue())

            plot.plot(x_series, y_values)
            plot.scatter(x_series, y_values)

        # Sets the plot title
        title = abstractContainer.stat.getName() + ", " + abstractContainer.interval
        plot.set_title(title)

        # Creates the canvas
        canvas = FigureCanvasTkAgg(fig, master=graph_container_frame)
        canvas.draw()

        # Creates the navigation tool bar
        toolbar = NavigationToolbar2Tk(canvas, graph_container_frame)
        toolbar.update()

        # Shows the canvas in the graph
        canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

        # Shows the actual graph (by showing the container)
        graph_container_frame.grid(row=0, column=0, rowspan=6, sticky="nsew")

        # Store the graph as the current graph
        self.current_graph = graph_container_frame

        # Add the graph container to the list of widgets we need to destroy
        self.dynamic_widgets.append(graph_container_frame)

        # Adds the legend to the plot
        plot.legend(abstractContainer.getSelectedPlayerNamesOrdered())

        # Show the average if necessary
        if self.average_check.get() == 1:
            key = abstractContainer.stat.getName() + str(abstractContainer.interval)
            if key in self.averages:
                plot.scatter(x_series, self.averages[key], marker="$μ$")
                plot.plot(x_series, self.averages[key])
            else:
                average_values = abstractContainer.getTeamAverage()
                self.averages[key] = average_values
                plot.scatter(x_series, average_values, marker="$μ$")
                plot.plot(x_series, average_values)

    def basicGo(self):
        # Clear the warning
        self.graph_error.grid_forget()

        try:
            graph_data = self.createBasicGraphContainer()
            self.createGraph(graph_data)
        except gpe.StatNotTrackedError as e:
            warning = "ERROR 301: " + e.stat + " is not available for " + e.player
            self.graph_error = tk.Label(self, text=warning, fg="red", bg=self.bg_color,
                                        font=("system", 7))
            self.graph_error.grid(row=0, column=0, rowspan=6, sticky="nsew")
        except gpe.NoPlayersSelected:
            warning = "ERROR 302: You must select at least one player to create the graph"
            self.graph_error = tk.Label(self, text=warning, fg="red", bg=self.bg_color,
                                        font=("system", 7))
            self.graph_error.grid(row=0, column=0, rowspan=6, sticky="nsew")
        except gpe.IncompleteRatioStatError as e:
            warning = "ERROR 303: " + e.stat + " is not complete for " + e.player + " (" + e.date.strftime(
                "%Y:%m:%d") + ")"
            self.graph_error = tk.Label(self, text=warning, fg="red", bg=self.bg_color,
                                        font=("system", 7))
            self.graph_error.grid(row=0, column=0, rowspan=6, sticky="nsew")


class RankPage(tk.Frame):

    def __init__(self, parent, controller):

        # The objects are used a lot by helper methods, so we just store them as attributes
        self.controller = controller
        self.bg_color = "#d3ecf2"
        self.button_color = "#3071F2"

        # Inherits the frame constructor
        tk.Frame.__init__(self, parent, bg=self.bg_color)

        # Grid configuration
        self.grid_columnconfigure(0, weight=2)
        self.grid_columnconfigure(1, weight=0)
        self.grid_rowconfigure((0, 1, 2, 3, 4), weight=1)

        # Stores all the widgets are that are spreadsheet dependant, so we can destroy them afterwards
        self.dynamic_widgets = []

        # Code for period selection drop down menu
        interval_options = ["Last Practice", "Last 10 Practices", "All Season"]
        self.selected_interval = tk.StringVar()
        self.selected_interval.set(interval_options[0])
        self.selected_interval.trace("w", self.updateDates)

        # We need to access the practice dates a lot, so its faster to store them as an attribute
        self.dates = self.controller.getTeam().getPracticeDates()
        self.startDate = None
        self.endDate = None

        # We need to store the current table so we can ungrid it when the button is re-pushed
        self.current_table = tk.Frame(self)

        # Create the graphing warning label to be initialized by the caller
        self.graph_error = tk.Frame()

        # Empty dict to hold the stat suggestion, key=statName(string), value = stat Object
        # We use this so we can get stats by name, since we must store strings in the dropdown menu
        self.suggested_stats_dict = {}
        self.selected_stat = tk.StringVar()

        # Code for interval drop down menu
        interval_drop = tk.OptionMenu(self, self.selected_interval, *interval_options)
        interval_drop['bg'] = self.button_color
        interval_drop['fg'] = "white"
        interval_drop['font'] = ('system', 5)
        interval_drop['width'] = 15
        interval_drop.grid(row=1, column=1, pady=5)
        interval_drop.configure(highlightthickness=0)

        # Code for average check box
        self.average_check = tk.IntVar()
        c = tk.Checkbutton(self, text="Show Team Average", variable=self.average_check, onvalue=1, offvalue=0,
                           bg=self.bg_color, font=("system", 5))
        c.grid(row=2, column=1, padx=30)

        # Code for "Advanced Settings" button
        b1 = tk.Button(self, text="Advanced Settings", command=lambda: print("WIP"), width=19, bg=self.button_color,
                       fg="white", font=("system", 5))
        b1.grid(row=3, column=1, pady=5, padx=30)

        # Code for ranking button
        b2 = tk.Button(self, text="GO", command=self.go_button, width=19, bg=self.button_color, fg="white",
                       font=("system", 5))
        b2.grid(row=4, column=1, pady=10)

    def updateContent(self):
        # Create the option bar on top of frame
        page_menu = tk.Menu(self.controller)
        page_menu.add_command(label="Home", command=lambda: self.controller.show_frame(StartPage))
        page_menu.add_command(label="Comparative Graph", command=lambda: self.controller.show_frame(GraphPage))
        page_menu.add_command(label="Individual Graph", command=lambda: self.controller.show_frame(PersonalGraphPage))
        self.controller.config(menu=page_menu)

        # Tear down the old widgets
        self.tearDown()

        # Dynamically create the spreadsheet specific stat suggestions
        self.createDropDownStats()

        # Initialize dates to last practice
        self.updateDates()

    # Removes all the spreadsheet specific widgets from the frame
    def tearDown(self):
        while not len(self.dynamic_widgets) == 0:
            w = self.dynamic_widgets.pop()
            w.destroy()

        # We need to reinitialize the empty table, because when we add the table to the list of dynamic widgets,
        # which means it gets destroyed
        # If we don't reinitialize, we attempt to ungrid a non-existent frame
        self.current_table = tk.Frame(self)

        self.graph_error.grid_forget()

    # Creates the stat drop down menu, based on the selected spreadsheet
    def createDropDownStats(self):
        suggested_stats_objects = self.controller.getTeam().getSuggestedStats()
        suggested_stats_names = []
        for stat in suggested_stats_objects:
            suggested_stats_names.append(stat.getName())
            self.suggested_stats_dict[stat.getName()] = stat
        self.selected_stat.set(suggested_stats_names[0])

        stats_drop = tk.OptionMenu(self, self.selected_stat, *suggested_stats_names)
        stats_drop['bg'] = self.button_color
        stats_drop['fg'] = "white"
        stats_drop['font'] = ('system', 5)
        stats_drop['width'] = 15
        stats_drop.grid(row=0, column=1, pady=5, padx=30)
        stats_drop.configure(highlightthickness=0)
        self.dynamic_widgets.append(stats_drop)

    # Function called when the interval drop down is toggled
    def updateDates(self, *args):
        interval = self.selected_interval.get()
        date_list = self.controller.getTeam().getPracticeDates()

        if interval == "Last Practice":
            self.startDate = date_list[-1]
            self.endDate = date_list[-1]
        elif interval == "Last 10 Practices":
            # Creating the start index, just in case we don't have enough practices
            start_index = max(-10, -1 * len(date_list))
            self.startDate = date_list[start_index]
            self.endDate = date_list[-1]
        elif interval == "All Season":
            self.startDate = date_list[0]
            self.endDate == date_list[-1]

    # Returns a frames, which contains the rankings (and average if checked)
    def createTableFrame(self):
        # Delete the previous table before drawing anything
        self.current_table.grid_forget()

        # Store all the necessary info to minimize function calls
        selected_stat = self.suggested_stats_dict[self.selected_stat.get()]
        start_date = self.startDate
        end_date = self.endDate
        average_requested = self.average_check.get() == 1
        rankings_list = self.controller.getTeam().getRankedList(selected_stat, start_date, end_date)

        # TABLE COLORING DEFINED HERE
        header_color = "#FFCD9C"
        body_color = "#FFEEDD"

        # Frame to hold the table
        container = tk.Frame(self)

        # So we can delete table next time we open the window
        self.dynamic_widgets.append(container)

        # Configuring the static part of the table
        container.columnconfigure((1, 2), weight=0)
        container.columnconfigure(0, weight=0)
        container.rowconfigure(1, weight=0)

        title_string = selected_stat.getName() + " leaders from " + start_date.strftime("%m/%d/%Y") + " to " + \
                       end_date.strftime("%m/%d/%Y")

        table_title = tk.Label(container, text=title_string, font=('system', 16), bg=self.bg_color)
        table_title.grid(row=0, column=0, columnspan=3)

        rank_title = tk.Label(container, text="RANK", bd=2, bg=header_color, relief="solid", font=('system', 12))
        rank_title.grid(row=1, column=0, sticky="nsew")
        names_title = tk.Label(container, text="NAME", bd=2, bg=header_color, relief="solid", font=('system', 12))
        names_title.grid(row=1, column=1, sticky="nsew")
        value_title = tk.Label(container, text=selected_stat.getTypeSymbol(), bd=2, bg=header_color, relief="solid",
                               font=('system', 12))
        value_title.grid(row=1, column=2, sticky="nsew")

        # Creates the table dynamically by looping
        for i in range(len(rankings_list)):
            (player, value) = rankings_list[i]

            rank_label = tk.Label(container, text=str(i + 1), bg=body_color, bd=2, relief="solid", font=('system', 8))
            rank_label.grid(row=i + 2, column=0, sticky="nsew")
            name_label = tk.Label(container, text=player.getName(), bg=body_color, bd=2, relief="solid",
                                  font=('system', 8))
            name_label.grid(row=i + 2, column=1, sticky="nsew")

            if np.isnan(value):
                value_string = "N/A"
            else:
                value_string = str(round(value, 2))
            value_label = tk.Label(container, text=value_string, bg=body_color, bd=2, relief="solid",
                                   font=('system', 8))
            value_label.grid(row=i + 2, column=2, sticky="nsew")

            container.rowconfigure(i + 2, weight=1)

        # If the average box was checked, we stick the average on the end of the table
        if average_requested:
            average = self.controller.getTeam().getAverageOverPeriod(selected_stat, start_date, end_date)
            bottom_row = len(rankings_list) + 2

            container.rowconfigure(bottom_row, weight=1)

            l1 = tk.Label(container, text="Average", bg=body_color, bd=2, relief="solid", font=('system', 8))
            l1.grid(row=bottom_row, column=0, sticky="nsew")
            l2 = tk.Label(container, text="-", bg=body_color, bd=2, relief="solid", font=('system', 8))
            l2.grid(row=bottom_row, column=1, sticky="nsew")

            if np.isnan(average):
                value_string = "N/A"
            else:
                value_string = str(round(average, 2))
            l3 = tk.Label(container, text=value_string, bg=body_color, bd=2, relief="solid", font=('system', 8))
            l3.grid(row=bottom_row, column=2, sticky="nsew")

        container.grid(row=0, column=0, sticky="ns", rowspan=5, pady=50, padx=10)
        self.current_table = container

    def go_button(self):
        self.graph_error.grid_forget()
        try:
            self.createTableFrame()
        except gpe.IncompleteRatioStatError as e:
            warning = "ERROR 303: " + e.stat + " is not complete for " + e.player + " (" + e.date.strftime(
                "%Y:%m:%d") + ")"
            self.graph_error = tk.Label(self, text=warning, fg="red", bg=self.bg_color,
                                        font=("system", 7))
            self.graph_error.grid(row=0, column=0, rowspan=6, sticky="nsew")


class PersonalGraphPage(tk.Frame):
    def __init__(self, parent, controller):
        # The objects are used a lot by helper methods, so we just store them as attributes
        self.controller = controller
        self.bg_color = "#d3ecf2"
        self.button_color = "#3071F2"

        # Inherits the frame constructor
        tk.Frame.__init__(self, parent, bg=self.bg_color)

        # Grid configuration
        self.grid_columnconfigure(0, weight=2)
        self.grid_columnconfigure(1, weight=0)
        self.grid_rowconfigure(7, weight=1)  # This is so the graph expands

        # Stores all the widgets are that are spreadsheet dependant, so we can destroy them afterwards
        self.dynamic_widgets = []

        # Create the graphing warning label to be initialized by the caller
        self.graph_error = tk.Frame()

        # Empty dict to hold the players, key=playerName(string), value = Player object
        # We use this so we can get players by name, since we must store strings in the dropdown menu
        self.players_dict = {}
        self.selected_player = tk.StringVar()

        # Store the current graph and report as an attributes, so we can close it before making a new one
        # This is to avoid stacking a metric shit ton of them
        # Initialized with an empty frame
        self.current_graph = tk.Frame(self)
        self.current_report = tk.Frame(self)

        # Empty dict to hold the stat suggestion, key=statName(string), value = stat Object
        # We use this so we can get stats by name, since we must store strings in the dropdown menu
        self.suggested_stats_dict = {}
        self.selected_stat = tk.StringVar()

        # Create and initialize the radio buttons and their drop-down menu
        self.radioValue = tk.IntVar()
        self.radio1 = tk.Radiobutton(self, text="Time Interval", variable=self.radioValue, val=0,
                                     command=self.updateRadioDropdown, bg=self.bg_color, font=('system', 5))
        self.radio1.grid(row=2, column=1, sticky="w", padx=25, pady=(20, 0))
        self.radio2 = tk.Radiobutton(self, text="Practice Moving Average", variable=self.radioValue, val=1,
                                     command=self.updateRadioDropdown, bg=self.bg_color, font=('system', 5))
        self.radio2.grid(row=3, column=1, sticky="w", padx=25, pady=(0, 10))

        self.interval_dropdown_selection = tk.StringVar()
        self.interval_dropdown_selection.set("Weekly")
        self.radio_dropdown = tk.OptionMenu(self, self.interval_dropdown_selection, *["Weekly", "Monthly"])
        self.radio_dropdown['bg'] = self.button_color
        self.radio_dropdown['fg'] = "white"
        self.radio_dropdown['font'] = ('system', 5)
        self.radio_dropdown['width'] = 15
        self.radio_dropdown['highlightthickness'] = 0
        self.radio_dropdown.grid(row=4, column=1, pady=(0, 20))

        # Create the Advanced Settings Button
        b1 = tk.Button(self, text="Advanced Settings", command=lambda: print("WIP"), width=19, bg=self.button_color,
                       fg="white", font=("system", 5))
        b1.grid(row=5, column=1, pady=20)

        # Create the Go Button
        b2 = tk.Button(self, text="GO", command=self.go, width=19, bg=self.button_color,
                       fg="white", font=("system", 5))
        b2.grid(row=6, column=1, pady=20)

    # Wraps up all the dynamic calls when creating the page
    def updateContent(self):
        # Create the option bar on top of frame
        page_menu = tk.Menu(self.controller)
        page_menu.add_command(label="Home", command=lambda: self.controller.show_frame(StartPage))
        page_menu.add_command(label="Rank", command=lambda: self.controller.show_frame(RankPage))
        page_menu.add_command(label="Comparative Graph", command=lambda: self.controller.show_frame(GraphPage))
        self.controller.config(menu=page_menu)

        self.tearDown()
        self.graph_error.grid_forget()

        self.createPlayerDropdownMenu()
        self.createDropDownStats()

    # Removes all the spreadsheet specific widgets from the frame
    def tearDown(self):
        while not len(self.dynamic_widgets) == 0:
            w = self.dynamic_widgets.pop()
            w.destroy()

        # Reinitialize the graph and report
        self.current_graph = tk.Frame(self)

        self.current_report.destroy()
        self.current_report = tk.Frame(self)

        # Erase previous errors
        self.graph_error.grid_forget()

    # Creates the player drop down menu, based on the selected spreadsheet
    def createPlayerDropdownMenu(self):
        player_objects = self.controller.getTeam().getRoster()
        player_names = []
        for player in player_objects:
            player_names.append(player.getName())
            self.players_dict[player.getName()] = player
        self.selected_player.set(player_names[0])

        player_drop = tk.OptionMenu(self, self.selected_player, *player_names)
        player_drop['bg'] = self.button_color
        player_drop['fg'] = "white"
        player_drop['font'] = ('system', 5)
        player_drop['width'] = 15
        player_drop.grid(row=0, column=1, pady=20, padx=30)
        player_drop.configure(highlightthickness=0)
        self.dynamic_widgets.append(player_drop)

    # Creates the stat drop down menu, based on the selected spreadsheet
    def createDropDownStats(self):
        suggested_stats_objects = self.controller.getTeam().getSuggestedStats()
        suggested_stats_names = []
        for stat in suggested_stats_objects:
            suggested_stats_names.append(stat.getName())
            self.suggested_stats_dict[stat.getName()] = stat
        self.selected_stat.set(suggested_stats_names[0])

        stats_drop = tk.OptionMenu(self, self.selected_stat, *suggested_stats_names)
        stats_drop['bg'] = self.button_color
        stats_drop['fg'] = "white"
        stats_drop['font'] = ('system', 5)
        stats_drop['width'] = 15
        stats_drop.configure(highlightthickness=0)
        stats_drop.grid(row=1, column=1, pady=20, padx=30)
        self.dynamic_widgets.append(stats_drop)

    # Function for updating period dropdown menu, based on selected radio button
    def updateRadioDropdown(self):
        self.radio_dropdown.destroy()

        if self.radioValue.get() == 0:
            options_list = ["Weekly", "Monthly"]
        else:
            options_list = ["3 Practices", "5 Practices", "10 Practices"]

        new_dropdown = tk.OptionMenu(self, self.interval_dropdown_selection, *options_list)
        new_dropdown['bg'] = self.button_color
        new_dropdown['fg'] = "white"
        new_dropdown['font'] = ('system', 5)
        new_dropdown['width'] = 15
        new_dropdown['highlightthickness'] = 0
        self.interval_dropdown_selection.set(options_list[0])
        self.radio_dropdown = new_dropdown
        self.radio_dropdown.grid(row=4, column=1, pady=(0, 20))

    # Returns an integer representing either the number of practices or the number of days
    def getIntervalValue(self):
        raw = self.interval_dropdown_selection.get()
        if raw == "Weekly" or raw == "Monthly":
            return raw
        else:
            value = raw.split(" ")[0]
            return int(value)

    # Returns the Stat object currently sitting in the drop down menu
    def getSelectedStat(self):
        return self.suggested_stats_dict[self.selected_stat.get()]

    # Returns the Player object currently sitting in the drop down menu
    def getSelectedPlayer(self):
        return self.players_dict[self.selected_player.get()]

    # Creates the graph, and also makes a call to generate the report
    def createGraph(self):
        # Starting by clearing the old graph
        self.current_graph.grid_forget()

        # Frame for holding the graph
        graph_container_frame = tk.Frame(self, bg=self.bg_color)
        self.dynamic_widgets.append(graph_container_frame)
        # Specify the minimum size of the plot
        fig = Figure(figsize=(6, 4))

        plot = fig.add_subplot(111)

        player = self.getSelectedPlayer()

        if self.radioValue.get() == 0:  # i.e. "Time Interval" is selected
            grouping_type = "Time Interval"
            datapoints = player.getGroupedDatapoints(self.getIntervalValue(), self.getSelectedStat())
            y_series = []
            x_series = []
            for dp in datapoints:
                y_series.append(dp.getYValue())
                x_series.append(dp.getXValue())
        else:  # i.e. "Moving Average" is selected
            grouping_type = "Moving Average"
            tuples = player.getMovingAverageTuplesList(self.getSelectedStat(), self.getIntervalValue())
            y_series = []
            x_series = []
            for a_tuple in tuples:
                y_series.append(a_tuple[1])
                x_series.append(a_tuple[0])

        plot.plot(x_series, y_series)
        plot.scatter(x_series, y_series)

        # Sets the plot title
        title = player.getName() + ", " + self.getSelectedStat().getName() + ", " + self.interval_dropdown_selection.get() + " " + grouping_type
        plot.set_title(title)

        # Creates the canvas
        canvas = FigureCanvasTkAgg(fig, master=graph_container_frame)
        canvas.draw()

        # Creates the navigation tool bar
        toolbar = NavigationToolbar2Tk(canvas, graph_container_frame)
        toolbar.update()

        # Shows the canvas in the graph
        canvas.get_tk_widget().pack(side=tk.TOP, fill=tk.BOTH, expand=1)

        # Shows the actual graph (by showing the container)
        graph_container_frame.grid(row=0, column=0, sticky="nsew", rowspan=10)

        # Store the graph as the current graph
        self.current_graph = graph_container_frame

        # Add the graph container to the list of widgets we need to destroy
        self.dynamic_widgets.append(graph_container_frame)

        self.generateReport(x_series, y_series)

    # Generates the report found on the side of the graph
    def generateReport(self, date_list, y_list):
        player = self.getSelectedPlayer()
        stat = self.getSelectedStat()

        # Clear the current report
        self.current_report.destroy()

        (date_list, y_list) = dataObjects.Helper.cleanUpForCorrelation(date_list, y_list)

        bg = "#FFEEDD"
        font = ('system', 5)

        container = tk.Frame(self, bd=2, relief="solid", bg=bg, width=100)
        container.rowconfigure((0, 1, 2, 3, 4, 5), weight=1)
        container.columnconfigure(0, weight=1)

        julian_dates = []

        for regular_date in date_list:
            julian_dates.append(julian.to_jd(regular_date))

        y_array = np.asarray(y_list)
        x_array = np.asarray(julian_dates)

        graph_correlation = pearsonr(x_array, y_array)[0]
        graph_stddev = math.sqrt(np.var(y_array, ddof=1))

        raw_correlation = player.getCorrelationToTime(stat)
        raw_stddev = math.sqrt(player.getPopVariance(stat))

        title1 = "GRAPH-SPECIFIC DATA"
        label1 = tk.Label(container, text=title1, bg=bg, font=font)
        label1.grid(row=0, column=0, pady=(10, 0))
        correlation1 = "Correlation Coefficient: " + "{:.2f}".format(graph_correlation)
        corlabel1 = tk.Label(container, text=correlation1, bg=bg, font=font)
        corlabel1.grid(row=1, column=0)
        stddev1 = "Standard Deviation: " + "{:.4f}".format(graph_stddev)
        stddevlabel1 = tk.Label(container, text=stddev1, bg=bg, font=font)
        stddevlabel1.grid(row=2, column=0)

        title2 = "RAW SPREADSHEET DATA"
        label2 = tk.Label(container, text=title2, bg=bg, font=font)
        label2.grid(row=3, column=0, pady=(10, 0))
        correlation2 = "Correlation Coefficient: " + "{:.2f}".format(raw_correlation)
        corlabel2 = tk.Label(container, text=correlation2, bg=bg, font=font)
        corlabel2.grid(row=4, column=0)
        stddev2 = "Standard Deviation: " + "{:.4f}".format(raw_stddev)
        stddevlabel2 = tk.Label(container, text=stddev2, bg=bg, font=font)
        stddevlabel2.grid(row=5, column=0, pady=(0, 10))

        self.current_report = container
        container.grid(row=7, column=1, sticky="ew")

    # called when the "GO" button is pressed
    def go(self):
        # Clear the warning
        self.graph_error.grid_forget()

        try:
            self.createGraph()
        except gpe.StatNotTrackedError as e:
            warning = "ERROR 301: " + e.stat + " is not available for " + e.player
            self.graph_error = tk.Label(self, text=warning, fg="red", bg=self.bg_color,
                                        font=("system", 7))
            self.graph_error.grid(row=0, column=0, rowspan=6, sticky="nsew")
        except gpe.IncompleteRatioStatError as e:
            warning = "ERROR 303: " + e.stat + " is not complete for " + e.player + " (" + e.date.strftime(
                "%Y:%m:%d") + ")"
            self.graph_error = tk.Label(self, text=warning, fg="red", bg=self.bg_color,
                                        font=("system", 7))
            self.graph_error.grid(row=0, column=0, rowspan=6, sticky="nsew")


class UserManual(tk.Frame):
    def __init__(self, parent, controller):
        self.controller = controller
        self.bg_color = "#d3ecf2"

        # Inherits the frame constructor
        tk.Frame.__init__(self, parent, bg=self.bg_color)

        self.grid_rowconfigure(0, weight=1)
        self.columnconfigure(0, weight=1)

        self.text_box = tk.Text(self, bg=self.bg_color, borderwidth=0, spacing1=10, wrap=tk.WORD)
        self.text_box.grid(row=0, column=0, sticky='nsew', padx=10, pady=10)
        self.scroll_bar = tk.Scrollbar(self)
        self.scroll_bar.grid(row=0, column=1, sticky='ens', rowspan=2)
        self.scroll_bar.config(command=self.text_box.yview)
        self.text_box.config(yscrollcommand=self.scroll_bar.set)

        self.fill_text_box()

        self.text_box['state'] = tk.DISABLED

    def updateContent(self):
        # Create the option bar on top of frame
        page_menu = tk.Menu(self.controller)
        page_menu.add_command(label="Back", command=lambda: self.controller.show_frame(StartPage))
        self.controller.config(menu=page_menu)

    def fill_text_box(self):
        self.create_table_of_contents()

        t1_font = ('Verdana', 24, 'bold')
        t2_font = ('Verdana', 16, 'bold')
        text_font = ('Verdana', 12)
        self.text_box.tag_configure('t2', font=t2_font)
        self.text_box.tag_configure('text', font=text_font)
        self.text_box.tag_configure('tag', font=text_font)

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, '\n', 'text')
        self.text_box.tag_configure('overview_t1', font=t1_font)
        self.text_box.insert(tk.END, "Overview\n", 'overview_t1')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, "Functionality in a Nutshell\n", 't2')
        functionality_text = ("Simply put, the Enpeekay Spreadsheet Graphing Tool 1.0.0 is a program that allows for "
                              "sports team data analysis and visualization. It relies on pre-existing Excel "
                              "spreadsheets, and relies on very few formatting conditions, which means it requires "
                              "little-to-no effort on your part! \n"
                              "\n"
                              "The Enpeekay Spreadsheet Graphing Tool offers three distinct operations:\n"
                              "1 - Rank | Rank your roster based on a specified metric\n"
                              "2 - Comparative Graphing | Graph generation intended for comparing two or more players "
                              "with each other, or against the team average\n"
                              "3 - Individual Graphing | Graph generation intended for analyzing an individual "
                              "player’s progress\n")
        self.text_box.insert(tk.END, functionality_text, 'text')
        self.text_box.insert(tk.END, '\n', 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, "Why not just use Excel?\n", 't2')
        explanation_text = ("Although some of the functionality can be achieved directly in Excel, the Enpeekay "
                            "Spreadsheet Graphing Tool makes the implementation easy and straightforward. Furthermore, "
                            "there are several key features that are unfeasible in Excel:\n"
                            "• Supports tracking different metrics for different players\n"
                            "• Plenty of easy-to-use custom settings, which makes graphs smoother and easier "
                            "to interpret\n"
                            "• Automatic average computing based on current settings\n"
                            "• Automatically ignores unmarked or unwanted cells \n"
                            "• Descriptive error messages for catching human error\n"
                            "• Computes indirectly measured stats automatically\n"
                            "• Plenty more!\n")
        self.text_box.insert(tk.END, explanation_text, 'text')
        self.text_box.insert(tk.END, '\n', 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, "Formatting your Spreadsheet\n", 't2')
        spreadsheet_text = ("Below are the required formatting conditions for the spreadsheet to be read properly. "
                            "Most users should be able to skip over this section, but if your spreadsheet is not being "
                            "read properly, please refer to this formal description:\n"
                            "• The data must appear on the first sheet of the workbook\n"
                            "• You need exactly one cell containing the word “DATE” (Capitalization makes no "
                            "difference, i.e. \"Date\", \"date\", and \"DaTe\" all work)\n"
                            "• Every cell in the column under \"DATE\" must be a date. (Formatting the cells as Dates "
                            "in Excel is the easiest way to achieve this)\n"
                            "• The dates must be in chronological order, from top to bottom\n"
                            "• The row of your \"DATE\" cell must contain all the stat titles\n"
                            "• None of the cells between \"DATE\" and your last stat title should be empty\n"
                            "• The row of players must be somewhere above the row of stats (A given player’s name "
                            "can be merged to cover all their stats, but this is not required)\n"
                            "• Players must have unique names (distinction by capitalization will NOT work)\n"
                            "• Never should a cell’s text contain \"Unnamed\"\n"
                            "• Every row requires an appropriate entry in the “DATE” column\n"
                            "• If you leave a completely empty column after any of your data, all the cells to the "
                            "right of that empty column will be ignored\n"
                            "\n"
                            "PLEASE NOTE:\n"
                            "1 - Cells that are empty are interpreted differently than cells marked with \"0\". Cells "
                            "that are empty are interpreted as an absence, while cells marked with \"0\" are "
                            "interpreted as being present and scoring zero.\n"
                            "2 - If a player misses a practice, you can mark the cell with anything that is not a "
                            "number, and it will be interpreted as an absence (leaving it blank has the same effect)\n"
                            "3 - If you have a completely empty column, any data to the right of it will be ignored "
                            "unless there is no data to the left of it (so you can still leave some space on the left "
                            "of your table)\n")
        self.text_box.insert(tk.END, spreadsheet_text, 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, '\n', 'text')
        self.text_box.tag_configure('op1_t1', font=t1_font)
        self.text_box.insert(tk.END, "Operation 1: RANK\n", 'op1_t1')
        rank_description = ("The RANK Operation allows you to pick a stat and time period, and will automatically rank "
                            "your roster accordingly. \n")
        self.text_box.insert(tk.END, rank_description, 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, "\n", 'text')
        self.text_box.insert(tk.END, 'Stats\n', 't2')
        rank_stats = ("The stats in the drop-down menu are determined by pairing up the stats in your spreadsheet. "
                      "If this is not the desired behaviour, you can create custom ratios under Advanced Settings "
                      "(NOT YET IMPLEMENTED BUT IS COMING SOON).\n")
        self.text_box.insert(tk.END, rank_stats, 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, '\n', 'text')
        self.text_box.insert(tk.END, "Average\n", 't2')
        rank_average = ("You can also show the team average during the period. This is not a weighted average, meaning "
                        "that for a two-man roster, if player A scored 1000/1000 and player B scored 0/1, the team "
                        "average is .500. Furthermore, if a player does not have the specified stat, they are omitted "
                        "from the average calculation.\n")
        self.text_box.insert(tk.END, rank_average, 'text')
        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, '\n', 'text')
        self.text_box.tag_configure('op2_t1', font=t1_font)
        self.text_box.insert(tk.END, "Operation 2: COMPARATIVE GRAPH\n", 'op2_t1')
        comparative_description = ("The COMPARATIVE GRAPH Operation allows you to compare different players over time. "
                                   "The idea is to determine who has been better, and when. You can also compare "
                                   "players against the team average.\n")
        self.text_box.insert(tk.END, comparative_description, 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, "\n", 'text')
        self.text_box.insert(tk.END, 'Stats\n', 't2')
        comparative_stats = ("The stats in the drop-down menu are determined by pairing up the stats in your "
                             "spreadsheet. If this is not the desired behaviour, you can create custom ratios "
                             "under Advanced Settings (NOT YET IMPLEMENTED BUT IS COMING SOON).\n")
        self.text_box.insert(tk.END, comparative_stats, 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, "\n", 'text')
        self.text_box.insert(tk.END, 'Method\n', 't2')
        comparative_method = ("The points in the graph are calculated based on the selected interval. If “Weekly” is "
                              "selected, the season will be divided into 7-day blocks, and all the practices in a "
                              "given block will be lumped together to create a data point. This is different than just "
                              "averaging the practices of a given block.\n\n"
                              "Example:\n"
                              "For week 1, player A scored 0/5, 0/5, and 490/490. His score is calculated as "
                              "follows:		 (0 + 0 + 490) / (5 + 5 + 490) = 490/500 = 98% \n"
                              "Had we simply averaged his practices, his score would be 33%: (0% + 0% + 100%) / 3 = 33%"
                              "\n\n"
                              "This larger sample size makes the graph a lot smoother and gives more weight to "
                              "practices where the skill in question was emphasized.\n")
        self.text_box.insert(tk.END, comparative_method, 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, "\n", 'text')
        self.text_box.insert(tk.END, 'Average\n', 't2')
        comparative_average = ("You can also graph the average team score (symbolized on the chart by “µ”). This is "
                               "not a weighted average, meaning that for a two-man roster, if Player A scores 1000/1000"
                               " and Player B scores 0/1, the average for that block will be .500. Furthermore, if a "
                               "player does not have the specified stat, they are omitted from the average "
                               "calculation.\n")
        self.text_box.insert(tk.END, comparative_average, 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, '\n', 'text')
        self.text_box.tag_configure('op3_t1', font=t1_font)
        self.text_box.insert(tk.END, "Operation 3: INDIVIDUAL GRAPH\n", 'op3_t1')
        individual_description = ("The INDIVIDUAL GRAPH Operation allows you to view an individual’s player evolution "
                                  "and determine whether they are on a satisfactory trajectory.\n")
        self.text_box.insert(tk.END, individual_description, 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, "\n", 'text')
        self.text_box.insert(tk.END, 'Stats\n', 't2')
        individual_average = ("The stats in the drop-down menu are determined by pairing up the stats in your "
                              "spreadsheet. If this is not the desired behaviour, you can create custom ratios under "
                              "Advanced Settings (NOT YET IMPLEMENTED BUT IS COMING SOON).\n")
        self.text_box.insert(tk.END, individual_average, 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, "\n", 'text')
        self.text_box.insert(tk.END, 'Time Interval vs. Moving Average\n', 't2')
        individual_grouping_explanation = ("“Time Interval” computes the data points using the same method as the "
                                           "COMPARATIVE GRAPH Operation.\n"
                                           "“Moving Average” is a straightforward moving "
                                           "average: each practice is considered its own value, there is no lumping "
                                           "together to weight the average. Weighting would skewer the “recency” "
                                           "factor, which is the whole point of a moving average.\n")
        self.text_box.insert(tk.END, individual_grouping_explanation, 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, "\n", 'text')
        self.text_box.insert(tk.END, 'Graph Report\n', 't2')
        individual_report = ("The Correlation Coefficient is a number between -1 and 1. It measures how likely the "
                             "advancing of time is to produce improved results. A value of 1 means that as time "
                             "advances, results are likely to trend upwards. A value of -1 means that as time advances,"
                             " results are likely to trend downwards. A value of 0 means that the passage of time has "
                             "nothing to do with the results. \n"
                             "The Standard Deviation is a measure of consistency. It represents on average, how far "
                             "a given data point is from the overall average. This means that the lower the standard "
                             "deviation, the better. For example, if Player A scores 0/100 on Monday and 100/100 on "
                             "Tuesday, he has the same average as Player B who scored 50/100 Monday and 50/100 on "
                             "Tuesday, but Player A has a much higher standard deviation than Player B. Therefore, "
                             "Player B is more consistent. \n"
                             "The Graph-Specific Data use the points on the graph to conduct its analysis, whereas "
                             "the Raw Spreadsheet Data treats each practice in the spreadsheet as its own data point.\n")
        self.text_box.insert(tk.END, individual_report, 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, '\n', 'text')
        self.text_box.tag_configure('trouble_t1', font=t1_font)
        self.text_box.insert(tk.END, "Troubleshooting\n", 'trouble_t1')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, "\n", 'text')
        self.text_box.insert(tk.END, 'Errors when Reading the Spreadsheet\n', 't2')
        reading_errors = ("ERROR 101: The file you selected could not be found\n"
                          "The file you specified has been moved, deleted, or is otherwise inaccessible. Make sure to "
                          "not modify the file after selecting it in the file explorer.\n"
                          "\n"
                          "ERROR 102: The file you selected is open in another program\n"
                          "Your operating system has denied the program access to the file. This usually means another "
                          "program is trying to write into the file. If Microsoft Excel is open, try closing it.\n"
                          "\n"
                          "ERROR 201: The file you selected had no cells labeled \"DATE\"\n"
                          "The spreadsheet in question has no cell labelled \"date\". Make sure there are no blank "
                          "spaces in front of the characters. If all else fails, clear the cell and re-label it.\n"
                          "\n"
                          "ERROR 202: Cell #_ under \"DATE\" contained _some_text rather than a date\n"
                          "For the row in question, the entry in the \"Date\" column was not of the correct format. Try"
                          " using Excel cell formatting. If the row in question is an empty row after all the data, "
                          "this means there are blank spaces somewhere in the row. Try deleting the row (and for good "
                          "measure a few underneath).\n"
                          "\n"
                          "ERROR 203: The players in your file could not be found\n"
                          "There did not appear to be any names in the rows above the date cell. If this is not the "
                          "case, please refer to \"Formatting your spreadsheet\" portion of the User Manual for "
                          "clarification.\n"
                          "\n"
                          "ERROR 204: There was an issue with the following player's stats: _player_name\n"
                          "One of the stat rows under the specified player was not labelled. If this is not the case, "
                          "please refer to \"Formatting your spreadsheet\" portion of the User Manual for "
                          "clarification.\n"
                          " \n"
                          "ERROR 205: There were no dates found under the \"DATE\" cell\n"
                          "The program determined that your \"Date\" column was completely empty. If this is not the "
                          "case, please refer to \"Formatting your spreadsheet\" portion of the User Manual for "
                          "clarification.\n"
                          "\n"
                          "ERROR 206: The date cell is not in chronological order (Date 1 → Date 2)\n"
                          "The dates in question are not in chronological order.\n")
        self.text_box.insert(tk.END, reading_errors, 'text')

        # --------------------------------------------------------------------------------------------------------------
        self.text_box.insert(tk.END, "\n", 'text')
        self.text_box.insert(tk.END, 'Errors when Generating Figures\n', 't2')
        generation_errors = ("ERROR 301: _stat_name is not available for _player_name\n"
                             "You attempted to graph a player’s results for a stat that is not being tracked on that "
                             "player. If this is not the case, please refer to \"Formatting your spreadsheet\" "
                             "portion of the User Manual for clarification.\n"
                             "\n"
                             "ERROR 302: You must select at least one player to create the graph\n"
                             "You clicked the graph button without selecting any players. Please check a name and "
                             "try again.\n"
                             "\n"
                             "ERROR 303: _stat_name is not complete for _player_name\n"
                             "This error occurs only for stats that are a ratio, when EXACTLY one of the necessary "
                             "cells has been filled. For example, on Monday, Player has 100 3PA, but the cell for 3PM "
                             "is blank. To rectify the error, you can either delete the contents of the one filled "
                             "cell, or you can add a value to the corresponding empty cell. This is done to eliminate"
                             " human error when filling out the spreadsheet.\n")
        self.text_box.insert(tk.END, generation_errors, 'text')

    # The tags of the headers are defined in fill_text_box
    def create_table_of_contents(self):
        title_font = ('Verdana', 24, 'bold')
        self.text_box.tag_configure('t1', font=title_font)

        self.text_box.insert(tk.END, "Table of Contents\n", 't1')

        font = ('Verdana', 12)
        self.text_box.tag_configure('overview_tag', font=font)
        self.text_box.tag_configure('op1_tag', font=font)
        self.text_box.tag_configure('op2_tag', font=font)
        self.text_box.tag_configure('op3_tag', font=font)
        self.text_box.tag_configure('troubleshoot_tag', font=font)

        self.text_box.insert(tk.END, "• Overview\n", 'overview_tag')
        self.text_box.insert(tk.END, "• Operation 1: Rank\n", 'op1_tag')
        self.text_box.insert(tk.END, "• Operation 2: Comparative Graph\n", 'op2_tag')
        self.text_box.insert(tk.END, "• Operation 3: Individual Graph\n", 'op3_tag')
        self.text_box.insert(tk.END, "• Troubleshooting\n", 'troubleshoot_tag')

        self.text_box.tag_bind('overview_tag', "<Button-1>", lambda e: self.move_to_tag('overview_t1'))
        self.text_box.tag_bind('op1_tag', "<Button-1>", lambda e: self.move_to_tag('op1_t1'))
        self.text_box.tag_bind('op2_tag', "<Button-1>", lambda e: self.move_to_tag('op2_t1'))
        self.text_box.tag_bind('op3_tag', "<Button-1>", lambda e: self.move_to_tag('op3_t1'))
        self.text_box.tag_bind('troubleshoot_tag', "<Button-1>", lambda e: self.move_to_tag('trouble_t1'))

    def move_to_tag(self, desired_tag):
        start_index = self.text_box.tag_ranges(desired_tag)[0]
        self.text_box.see(start_index)


app = ExcelToolApp()
app.mainloop()


